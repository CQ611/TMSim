<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TEXT_English" xml:space="preserve">
    <value>E_nglish</value>
  </data>
  <data name="TEXT_Examples" xml:space="preserve">
    <value>Exam_ples</value>
  </data>
  <data name="TEXT_Exit" xml:space="preserve">
    <value>E_xit</value>
  </data>
  <data name="TEXT_File" xml:space="preserve">
    <value>_File</value>
  </data>
  <data name="TEXT_German" xml:space="preserve">
    <value>_German</value>
  </data>
  <data name="TEXT_Highlight" xml:space="preserve">
    <value>_Highlight State</value>
  </data>
  <data name="TEXT_Inputword" xml:space="preserve">
    <value>Input _word: </value>
  </data>
  <data name="TEXT_Language" xml:space="preserve">
    <value>_Language</value>
  </data>
  <data name="TEXT_New" xml:space="preserve">
    <value>_New</value>
  </data>
  <data name="TEXT_Open" xml:space="preserve">
    <value>_Open</value>
  </data>
  <data name="TEXT_PopupAccept" xml:space="preserve">
    <value>Accepting</value>
  </data>
  <data name="TEXT_PopupBlank" xml:space="preserve">
    <value>New Blank Symbol:</value>
  </data>
  <data name="TEXT_PopupAddSymbol" xml:space="preserve">
    <value>Add Symbol</value>
  </data>
  <data name="TEXT_PopupCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="TEXT_PopupIdentifier" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="TEXT_PopupIdentifierText" xml:space="preserve">
    <value>This should not be visible</value>
  </data>
  <data name="TEXT_PopupIsInputAlphabet" xml:space="preserve">
    <value>Input Alphabet</value>
  </data>
  <data name="TEXT_PopupOK" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="TEXT_PopupStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TEXT_PopupSymbol" xml:space="preserve">
    <value>Symbol:</value>
  </data>
  <data name="TEXT_Preferences" xml:space="preserve">
    <value>Pr_eferences</value>
  </data>
  <data name="TEXT_Save" xml:space="preserve">
    <value>_Save</value>
  </data>
  <data name="TEXT_SpeedLabel" xml:space="preserve">
    <value>Speed: </value>
  </data>
  <data name="TEXT_Transform" xml:space="preserve">
    <value>_Transform</value>
  </data>
  <data name="TEXT_Transformation1" xml:space="preserve">
    <value>Transformation No. _1</value>
  </data>
  <data name="TEXT_Transformation2" xml:space="preserve">
    <value>Transformation No. _2</value>
  </data>
  <data name="TEXT_Transformation3" xml:space="preserve">
    <value>Transformation No. _3</value>
  </data>
  <data name="TEXT_Transformation4" xml:space="preserve">
    <value>Transformation No. _4</value>
  </data>
  <data name="TEXT_Transformation5" xml:space="preserve">
    <value>Transformation No. _5</value>
  </data>
  <data name="TEXT_Upload" xml:space="preserve">
    <value>_Load</value>
  </data>
  <data name="TEXT_Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="TEXT_Direction" xml:space="preserve">
    <value>Direction</value>
  </data>
  <data name="TEXT_ReadSymbols" xml:space="preserve">
    <value>Read symbols</value>
  </data>
  <data name="TEXT_SourceState" xml:space="preserve">
    <value>Source state</value>
  </data>
  <data name="TEXT_Tapes" xml:space="preserve">
    <value> tape(s)!</value>
  </data>
  <data name="TEXT_TargetState" xml:space="preserve">
    <value>Target state</value>
  </data>
  <data name="TEXT_Warn_SymCount" xml:space="preserve">
    <value> characters, but there are </value>
  </data>
  <data name="TEXT_Warn_SymReCount" xml:space="preserve">
    <value>Symbols read contain </value>
  </data>
  <data name="TEXT_Warn_SymWrCount" xml:space="preserve">
    <value>Symbols write contain </value>
  </data>
  <data name="TEXT_WriteSymbols" xml:space="preserve">
    <value>Write symbols</value>
  </data>
  <data name="TOOLTIP_Eingabe" xml:space="preserve">
    <value>Type word</value>
  </data>
  <data name="TOOLTIP_Pause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="TOOLTIP_Play" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="TOOLTIP_Speed" xml:space="preserve">
    <value>Change Speed of animation</value>
  </data>
  <data name="TOOLTIP_Step" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="TOOLTIP_Stop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="TOOLTIP_Transformation1" xml:space="preserve">
    <value>No transition leads to the start state and none of the transitions begin in an accepting state</value>
  </data>
  <data name="TOOLTIP_Transformation2" xml:space="preserve">
    <value>There are no state transitions with an unmoved read-/writehead</value>
  </data>
  <data name="TOOLTIP_Transformation3" xml:space="preserve">
    <value>The blank character is never written</value>
  </data>
  <data name="TOOLTIP_Transformation4" xml:space="preserve">
    <value>The state set is divided into a left and right half</value>
  </data>
  <data name="TOOLTIP_Transformation5" xml:space="preserve">
    <value>There is exactly one accepting state</value>
  </data>
  <data name="TOOLTIP_Upload" xml:space="preserve">
    <value>Write input word on tape</value>
  </data>
  <data name="TEXT_DiagramView" xml:space="preserve">
    <value>_Diagram</value>
  </data>
  <data name="TEXT_TableView" xml:space="preserve">
    <value>Ta_ble</value>
  </data>
  <data name="TEXT_View" xml:space="preserve">
    <value>_View</value>
  </data>
  <data name="TEXT_InvalidInputWord" xml:space="preserve">
    <value>The input word is not valid!</value>
  </data>
  <data name="TEXT_InvalidTapeNumberInDefinition" xml:space="preserve">
    <value>The number of tapes does not match the transition definition!</value>
  </data>
  <data name="TEXT_ReadSymbolDoesNotExist" xml:space="preserve">
    <value>The tape alphabet does not contain the read-symbol!</value>
  </data>
  <data name="TEXT_SourceStateDoesNotExist" xml:space="preserve">
    <value>The source state of the transition does not exist!</value>
  </data>
  <data name="TEXT_StateDoesNotExist" xml:space="preserve">
    <value>The state does not exist!</value>
  </data>
  <data name="TEXT_StateExists" xml:space="preserve">
    <value>The state already exists!</value>
  </data>
  <data name="TEXT_SymbolDoesNotExist" xml:space="preserve">
    <value>The tape alphabet does not contain the symbol!</value>
  </data>
  <data name="TEXT_SymbolExists" xml:space="preserve">
    <value>The tape alphabet already contains the symbol!</value>
  </data>
  <data name="TEXT_TargetStateDoesNotExist" xml:space="preserve">
    <value>The target state of the transition does not exist!</value>
  </data>
  <data name="TEXT_TransitionDoesNotExist" xml:space="preserve">
    <value>The transition does not exist!</value>
  </data>
  <data name="TEXT_TransitionExists" xml:space="preserve">
    <value>The transition already exists!</value>
  </data>
  <data name="TEXT_WriteSymbolDoesNotExist" xml:space="preserve">
    <value>The tape alphabet does not contain the write-symbol!</value>
  </data>
  <data name="TEXT_Info_SimulationSuccess" xml:space="preserve">
    <value>Accepting state was reached</value>
  </data>
  <data name="TEXT_Info_DefaultMessage" xml:space="preserve">
    <value>Welcome to TMSim</value>
  </data>
  <data name="TEXT_Info_SimulationFailure" xml:space="preserve">
    <value>No accepting state was reached</value>
  </data>
  <data name="TEXT_Info_SimulationIsPaused" xml:space="preserve">
    <value>Simulation is paused</value>
  </data>
  <data name="TEXT_Info_SimulationIsRunning" xml:space="preserve">
    <value>Simulation is running</value>
  </data>
  <data name="TEXT_Info_SimulationIsStopped" xml:space="preserve">
    <value>Simulation was aborted</value>
  </data>
  <data name="TEXT_Info_SimulationSingleStep" xml:space="preserve">
    <value>Single step executed</value>
  </data>
  <data name="TEXT_DefinitionDiagram" xml:space="preserve">
    <value>Definition as diagram</value>
  </data>
  <data name="TEXT_DefinitionTable" xml:space="preserve">
    <value>Definition as table</value>
  </data>
  <data name="TEXT_Info_InputWordWrittenOnTape" xml:space="preserve">
    <value>Input word written on tape</value>
  </data>
  <data name="TEXT_ImportFileIsNotValid" xml:space="preserve">
    <value>The imported file is not valid!</value>
  </data>
  <data name="TEXT_InputAlphabetIsNoSubsetOfTapeAlphabet" xml:space="preserve">
    <value>Input alphabet has to be a subset of tape alphabet!</value>
  </data>
  <data name="TEXT_HelpWindow_00" xml:space="preserve">
    <value>This introduction is meant to familiarize you with using the application and turing machines.</value>
  </data>
  <data name="TEXT_HelpWindow_05" xml:space="preserve">
    <value>Start state: State of the turing machine before it starts computing.
End state: State in which the turing machine halts and checks if your input word is part of the language of the turing machine or not.
Transition: Depending on the character below the read-/writehead and the state the machine is currently in. Replaces the character under the read-/writehead, moves the head either right, left or not at all and the machine then either enters a new state or stays in the current one.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_00" xml:space="preserve">
    <value>Welcome to TMSim</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_05" xml:space="preserve">
    <value>What is a turing machine? (part 2)</value>
  </data>
  <data name="TEXT_HelpWindow_15" xml:space="preserve">
    <value>Rightclicking on the space of the diagram opens this menu with which you can add a new state.
The checkbox at (1) decides if the turing machine should start in that state. There can only be one start state at a time. The first state added will always be the start state.
With the checkbox at (2) you can decide if the state should be an end state. There can be multiple end states.
The red dot at (3) signals that the state has a comment. Positioning your mouse above the state will display it.
You can edit or remove states later by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_16" xml:space="preserve">
    <value>Repeat the last two steps until your diagram and alphabet look like this. The underscore '_' is used as the blank character.</value>
  </data>
  <data name="TEXT_HelpWindow_07" xml:space="preserve">
    <value>This chapter shows you how to create a turing machine that can check whether or not the number of zeros in your input word is even or not using only the table.</value>
  </data>
  <data name="TEXT_HelpWindow_08" xml:space="preserve">
    <value>With the checkbox at (1) you can decide if the new character should be part of the input alphabet. If it is then it can be used in the input word.
These characters are printed in bold letters.
With the checkbox at (2) you can decide if the new character should represent the blank character. You always have to explicitly define a blank character. This character is colored red.
You can edit or remove characters later by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_09" xml:space="preserve">
    <value>The checkbox at (1) decides if the turing machine should start in that state. There can only be one start state at a time. The first state added will always be the start state.
With the checkbox at (2) you can decide if the state should be an end state. There can be multiple end states.
The red triangle signals that the state has a comment. Positioning your mouse above the state will display it.
You can edit or remove states later by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_10" xml:space="preserve">
    <value>Repeat the last two steps until your table looks like this. The underscore '_' is used as the blank character.</value>
  </data>
  <data name="TEXT_HelpWindow_11" xml:space="preserve">
    <value>With a rightclick on a cell you can add a transition (does not work with the topmost and leftmost cells).
How to read the now open popup:
The turing machine is in the state "Start" and the read-/writehead is currently above the character "0" on the tape.
The turing machine replaces "0" with "0" and moves the read-/writehead one cell to the right.
The turing machine is now in the state "q1".
The red triangle signals that the transition has a comment. Positioning your mouse above the transition will display it.</value>
  </data>
  <data name="TEXT_HelpWindow_12" xml:space="preserve">
    <value>If your table looks exactly like this then your turing machine is able to determine whether or not your input word contains an even amount of zeros. If the amount is even then the turing machine reaches an accepting state, otherwise it does not.
Now that you are familiar with the table you can try to create some more complex and therefor interesting turing machines.
If you want to get some inspiration then you can check out the available examples.</value>
  </data>
  <data name="TEXT_HelpWindow_13" xml:space="preserve">
    <value>This chapter shows you how to create a turing machine that can check whether or not the number of zeros in your input word is even or not using only the diagram.</value>
  </data>
  <data name="TEXT_HelpWindow_14" xml:space="preserve">
    <value>Rightclicking on the space of the diagram opens this menu with which you can add a new character.
With the checkbox at (1) you can decide if the new character should be part of the input alphabet. If it is then it can be used in the input word.
These characters are printed in bold letters.
With the checkbox at (2) you can decide if the new character should represent the blank character. You always have to explicitly define a blank character. This character is colored red.
You can edit or remove characters later using this menu.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_15" xml:space="preserve">
    <value>Adding a state</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_16" xml:space="preserve">
    <value>Current goal</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_07" xml:space="preserve">
    <value>How to use the table</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_08" xml:space="preserve">
    <value>Adding a character</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_09" xml:space="preserve">
    <value>Adding a state</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_10" xml:space="preserve">
    <value>Current goal</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_11" xml:space="preserve">
    <value>Adding a transition</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_12" xml:space="preserve">
    <value>Final result</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_13" xml:space="preserve">
    <value>How to use the diagram</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_14" xml:space="preserve">
    <value>Adding a character</value>
  </data>
  <data name="TEXT_Warn_Memory" xml:space="preserve">
    <value>The saving process could not be executed properly!</value>
  </data>
  <data name="TEXT_Warn_Transformation4" xml:space="preserve">
    <value>Transformation 4 can not be executed currently. Please check, that the start state is not an end state and that the read-/writehead is never unmoved!</value>
  </data>
  <data name="TEXT_Warn_Transformation5" xml:space="preserve">
    <value>Transformation 4 can not be executed currently. Please check, that there is at least one end state!</value>
  </data>
  <data name="TEXT_AddTransition" xml:space="preserve">
    <value>Add Transition</value>
  </data>
  <data name="TEXT_EditState" xml:space="preserve">
    <value>Edit State</value>
  </data>
  <data name="TEXT_EditSymbol" xml:space="preserve">
    <value>Edit Symbol</value>
  </data>
  <data name="TEXT_EditTransition" xml:space="preserve">
    <value>Edit Transition</value>
  </data>
  <data name="TEXT_RemoveState" xml:space="preserve">
    <value>Remove State</value>
  </data>
  <data name="TEXT_RemoveSymbol" xml:space="preserve">
    <value>Remove Symbol</value>
  </data>
  <data name="TEXT_RemoveTransition" xml:space="preserve">
    <value>Remove Transition</value>
  </data>
  <data name="TEXT_Table" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="TEXT_AddSymbol" xml:space="preserve">
    <value>Add Symbol</value>
  </data>
  <data name="TEXT_PopupIsBlankChar" xml:space="preserve">
    <value>Blank character</value>
  </data>
  <data name="TEXT_Warn_BlankCharMustBeSet" xml:space="preserve">
    <value>The blank character must be set!</value>
  </data>
  <data name="TEXT_Warn_SymbolIsInputAndBlank" xml:space="preserve">
    <value>The symbol cannot be in the input alphabet while also being the blank character!</value>
  </data>
  <data name="TEXT_Warn_NoStartState" xml:space="preserve">
    <value>There is no start state!</value>
  </data>
  <data name="TEXT_Warn_UnsupportedLanguage" xml:space="preserve">
    <value>This language is not supported!</value>
  </data>
  <data name="TEXT_AddState" xml:space="preserve">
    <value>Add State</value>
  </data>
  <data name="TEXT_Animate" xml:space="preserve">
    <value>Animate</value>
  </data>
  <data name="TEXT_Arrange" xml:space="preserve">
    <value>Arrange</value>
  </data>
  <data name="TEXT_Warn_SymbolAlreadyExists" xml:space="preserve">
    <value>At least one symbol in the tape alphabet appears twice!</value>
  </data>
  <data name="TEXT_Warn_SymbolDoesNotExist" xml:space="preserve">
    <value>Not all symbols that the turing machine uses are part of the input alphabet!</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_ChapterSelection" xml:space="preserve">
    <value>_Chapter selection</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Diagram" xml:space="preserve">
    <value>Dia_gram</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Introduction" xml:space="preserve">
    <value>_Introduction</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program" xml:space="preserve">
    <value>_Application</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program_GeneralUse" xml:space="preserve">
    <value>_Usage</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program_Shortcuts" xml:space="preserve">
    <value>_Keyboard shortcuts</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Table" xml:space="preserve">
    <value>Ta_ble</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_AddState" xml:space="preserve">
    <value>Adding a _state</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_AddCharacter" xml:space="preserve">
    <value>Adding a c_haracter</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_AddTransition" xml:space="preserve">
    <value>Adding a _transition</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_Outlook" xml:space="preserve">
    <value>_Outlook</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_Result" xml:space="preserve">
    <value>_Final result</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine" xml:space="preserve">
    <value>_Turing Machine</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine_Explanation1" xml:space="preserve">
    <value>Turing Machine explained (part _1)</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine_Transformation" xml:space="preserve">
    <value>Transformations _explained</value>
  </data>
  <data name="TEXT_Warn_Transformation1" xml:space="preserve">
    <value>Transformation 1 can not be executed currently. Please check if there is at least a start state and/or an end state!</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program_FunctionKeys" xml:space="preserve">
    <value>_Function keys</value>
  </data>
  <data name="TEXT_HelpText" xml:space="preserve">
    <value>_Help</value>
  </data>
  <data name="TEXT_HelpWindow_01" xml:space="preserve">
    <value>Here you can see where to find the most important features of this application. How to create turing machines using the table and diagram will be explained in detail later.</value>
  </data>
  <data name="TEXT_HelpWindow_02" xml:space="preserve">
    <value>Here you can see a few examples of keyboard shortcuts. All of them use the "Alt"-key and the key of the underlined letter.</value>
  </data>
  <data name="TEXT_HelpWindow_03" xml:space="preserve">
    <value>Here you can see all function keys and their function. </value>
  </data>
  <data name="TEXT_HelpWindow_Heading_01" xml:space="preserve">
    <value>The most important features</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_02" xml:space="preserve">
    <value>Keyboard shortcuts</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_03" xml:space="preserve">
    <value>Function keys</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_04" xml:space="preserve">
    <value>What is a turing machine? (part 1)</value>
  </data>
  <data name="TEXT_HelpWindow_04" xml:space="preserve">
    <value>A turing machine is an abstract machine that can determine whether or not your input word is part of the language of the machine.
Language: Determines the order in which characters follow each other.
Tape alphabet: All characters that the turing machine can read from and write on the tape.
Blank character: Special character that symbolizes an empty cell on the tape.
Input alphabet: All characters that can appear in the input word (subset of the tape alphabet).
Input word: The word that is written on the tape before the turing machine starts computing.
Read-/writehead: Reads characters from and writes them on the tape.</value>
  </data>
  <data name="TEXT_HelpWindow_06" xml:space="preserve">
    <value>A transformation adds extra constraints for the turing machine to follow. This has no effect on whether or not a certain input word is part of the language of the machine.
This turing machine can be transformed in the following ways:
1) A transition can never lead into the start state, the start state cannot be an end state and end states cannot be exited with transitions (also counts for transitions that are loops on the end state).
2) Every transition has to move the read-/writehead either left or right.
3) You can set a new blank character. This character will be placed on the tape instead of the old one. Only affects transitions and not the content of the empty cells left and right of your input word.
4) All transitions are split into a left and a right half. The left half only contains transitions where the read-/writehead moves left. The same applies to the right half. (Prerequisits: transformation 1 and 2)
5) There is exactly one end state. (Prerequisits: There has to at least one end state already)</value>
  </data>
  <data name="TEXT_HelpWindow_17" xml:space="preserve">
    <value>Rightclicking on a state opens a menu where you can add a new transition. You can also rightclick on a state and only release that key when you have reached the target state of the transition to directly get to this popup.
How to read the now open popup:
The turing machine is in state "Start" and the read-/writehead is currently above the character "0" on the tape.
The turing machine replaces "0" with "0" and moves the read-/writehead on cell to the right.
The turing machine is now in state "q1".
The red dot at (1) signals that the transition has a comment. Positioning your mouse above the text with the gray background will display it.
You can later edit or remove transitions by rightclicking on the text with the gray background.</value>
  </data>
  <data name="TEXT_HelpWindow_18" xml:space="preserve">
    <value>If your diagram and alphabet look exactly like this then your turing machine is able to determine whether or not your input word contains an even amount of zeros. If the amount is even then the turing machine reaches an accepting state, otherwise it does not.
Now that you are familiar with the table you can try to create some more complex and therefor interesting turing machines.
If you want to get some inspiration then you can check out the available examples.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_06" xml:space="preserve">
    <value>What is a transformation?</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_17" xml:space="preserve">
    <value>Adding a transition</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_18" xml:space="preserve">
    <value>Final result</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_CurrentGoal" xml:space="preserve">
    <value>Current _goal</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine_Explanation2" xml:space="preserve">
    <value>Turing Machine explained (part _2)</value>
  </data>
  <data name="TEXT_Transformation3DialogNote" xml:space="preserve">
    <value>Replaces the current blank character in the transitions, but not the blank characters left and right of the input word on the tape</value>
  </data>
  <data name="TEXT_Warn_NewBlankAlreadyExists" xml:space="preserve">
    <value>The chosen character already exists in the tape alphabet.</value>
  </data>
  <data name="TEXT_Warn_Transformation3" xml:space="preserve">
    <value>Tranformation 3 is not excecutable, because no transition writes the blank character.</value>
  </data>
  <data name="TEXT_SaveAs" xml:space="preserve">
    <value>Save _as</value>
  </data>
</root>