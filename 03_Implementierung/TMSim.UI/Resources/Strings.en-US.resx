<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TEXT_English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="TEXT_Examples" xml:space="preserve">
    <value>Exam_ples</value>
  </data>
  <data name="TEXT_Exit" xml:space="preserve">
    <value>E_xit</value>
  </data>
  <data name="TEXT_File" xml:space="preserve">
    <value>_File</value>
  </data>
  <data name="TEXT_German" xml:space="preserve">
    <value>German</value>
  </data>
  <data name="TEXT_Highlight" xml:space="preserve">
    <value>_Highlight State</value>
  </data>
  <data name="TEXT_Inputword" xml:space="preserve">
    <value>Input _word: </value>
  </data>
  <data name="TEXT_Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="TEXT_New" xml:space="preserve">
    <value>_New</value>
  </data>
  <data name="TEXT_Open" xml:space="preserve">
    <value>_Open</value>
  </data>
  <data name="TEXT_PopupAccept" xml:space="preserve">
    <value>Accepting</value>
  </data>
  <data name="TEXT_PopupBlank" xml:space="preserve">
    <value>New Blank Symbol:</value>
  </data>
  <data name="TEXT_PopupAddSymbol" xml:space="preserve">
    <value>Add Symbol</value>
  </data>
  <data name="TEXT_PopupCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="TEXT_PopupIdentifier" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="TEXT_PopupIdentifierText" xml:space="preserve">
    <value>This should not be visible</value>
  </data>
  <data name="TEXT_PopupIsInputAlphabet" xml:space="preserve">
    <value>Input Alphabet</value>
  </data>
  <data name="TEXT_PopupOK" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="TEXT_PopupStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TEXT_PopupSymbol" xml:space="preserve">
    <value>Symbol:</value>
  </data>
  <data name="TEXT_Preferences" xml:space="preserve">
    <value>Pr_eferences</value>
  </data>
  <data name="TEXT_Save" xml:space="preserve">
    <value>_Save</value>
  </data>
  <data name="TEXT_SpeedLabel" xml:space="preserve">
    <value>Speed: </value>
  </data>
  <data name="TEXT_Transform" xml:space="preserve">
    <value>Transform</value>
  </data>
  <data name="TEXT_Transformation1" xml:space="preserve">
    <value>transformation No. 1</value>
  </data>
  <data name="TEXT_Transformation2" xml:space="preserve">
    <value>transformation No. 2</value>
  </data>
  <data name="TEXT_Transformation3" xml:space="preserve">
    <value>transformation No. 3</value>
  </data>
  <data name="TEXT_Transformation4" xml:space="preserve">
    <value>transformation No. 4</value>
  </data>
  <data name="TEXT_Transformation5" xml:space="preserve">
    <value>transformation No. 5</value>
  </data>
  <data name="TEXT_Upload" xml:space="preserve">
    <value>_Load</value>
  </data>
  <data name="TEXT_Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="TEXT_Directions" xml:space="preserve">
    <value>Directions</value>
  </data>
  <data name="TEXT_ReadSymbols" xml:space="preserve">
    <value>Read symbols</value>
  </data>
  <data name="TEXT_SourceState" xml:space="preserve">
    <value>Source state</value>
  </data>
  <data name="TEXT_Tapes" xml:space="preserve">
    <value> tape(s)!</value>
  </data>
  <data name="TEXT_TargetState" xml:space="preserve">
    <value>Target state</value>
  </data>
  <data name="TEXT_Warn_SymCount" xml:space="preserve">
    <value> characters, but there are </value>
  </data>
  <data name="TEXT_Warn_SymReCount" xml:space="preserve">
    <value>Symbols read contain </value>
  </data>
  <data name="TEXT_Warn_SymWrCount" xml:space="preserve">
    <value>Symbols write contain </value>
  </data>
  <data name="TEXT_WriteSymbols" xml:space="preserve">
    <value>Write symbols</value>
  </data>
  <data name="TOOLTIP_Eingabe" xml:space="preserve">
    <value>Type word</value>
  </data>
  <data name="TOOLTIP_Pause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="TOOLTIP_Play" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="TOOLTIP_Speed" xml:space="preserve">
    <value>Change Speed of animation</value>
  </data>
  <data name="TOOLTIP_Step" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="TOOLTIP_Stop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="TOOLTIP_Transformation1" xml:space="preserve">
    <value>No transition leads to the start state and none of the transitions begin in an accepting state</value>
  </data>
  <data name="TOOLTIP_Transformation2" xml:space="preserve">
    <value>There are no state transitions with unmoved read/write head</value>
  </data>
  <data name="TOOLTIP_Transformation3" xml:space="preserve">
    <value>The space character is never written</value>
  </data>
  <data name="TOOLTIP_Transformation4" xml:space="preserve">
    <value>The state set is divided into a right and left half</value>
  </data>
  <data name="TOOLTIP_Transformation5" xml:space="preserve">
    <value>There is exactly one accepting state</value>
  </data>
  <data name="TOOLTIP_Upload" xml:space="preserve">
    <value>insert and upload text to tape</value>
  </data>
  <data name="TEXT_DiagramView" xml:space="preserve">
    <value>Diagram</value>
  </data>
  <data name="TEXT_TableView" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="TEXT_View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="TEXT_InvalidInputWord" xml:space="preserve">
    <value>The input word is not valid!</value>
  </data>
  <data name="TEXT_InvalidTapeNumberInDefinition" xml:space="preserve">
    <value>The number of tapes does not match the transition definition!</value>
  </data>
  <data name="TEXT_ReadSymbolDoesNotExist" xml:space="preserve">
    <value>The tape alphabet does not contain the read-symbol!</value>
  </data>
  <data name="TEXT_SourceStateDoesNotExist" xml:space="preserve">
    <value>The source state of the transition does not exist!</value>
  </data>
  <data name="TEXT_StateDoesNotExist" xml:space="preserve">
    <value>The state does not exist!</value>
  </data>
  <data name="TEXT_StateExists" xml:space="preserve">
    <value>The state already exists!</value>
  </data>
  <data name="TEXT_SymbolDoesNotExist" xml:space="preserve">
    <value>The tape alphabet does not contain the symbol!</value>
  </data>
  <data name="TEXT_SymbolExists" xml:space="preserve">
    <value>The tape alphabet already contains the symbol!</value>
  </data>
  <data name="TEXT_TargetStateDoesNotExist" xml:space="preserve">
    <value>The target state of the transition does not exist!</value>
  </data>
  <data name="TEXT_TransitionDoesNotExist" xml:space="preserve">
    <value>The transition does not exist!</value>
  </data>
  <data name="TEXT_TransitionExists" xml:space="preserve">
    <value>The transition already exists!</value>
  </data>
  <data name="TEXT_WriteSymbolDoesNotExist" xml:space="preserve">
    <value>The tape alphabet does not contain the write-symbol!</value>
  </data>
  <data name="TEXT_Info_SimulationSuccess" xml:space="preserve">
    <value>Accepting state was reached</value>
  </data>
  <data name="TEXT_Info_DefaultMessage" xml:space="preserve">
    <value>Welcome to TMSim</value>
  </data>
  <data name="TEXT_Info_SimulationFailure" xml:space="preserve">
    <value>No accepting state was reached</value>
  </data>
  <data name="TEXT_Info_SimulationIsPaused" xml:space="preserve">
    <value>Simulation is paused</value>
  </data>
  <data name="TEXT_Info_SimulationIsRunning" xml:space="preserve">
    <value>Simulation is running</value>
  </data>
  <data name="TEXT_Info_SimulationIsStopped" xml:space="preserve">
    <value>Simulation was aborted</value>
  </data>
  <data name="TEXT_Info_SimulationSingleStep" xml:space="preserve">
    <value>Single Step executed</value>
  </data>
  <data name="TEXT_DefinitionDiagramm" xml:space="preserve">
    <value>Definition as diagram</value>
  </data>
  <data name="TEXT_DefinitionTabelle" xml:space="preserve">
    <value>Definition as table</value>
  </data>
  <data name="TEXT_Info_InputWordWrittenOnTape" xml:space="preserve">
    <value>Input word written on tape</value>
  </data>
  <data name="TEXT_ImportFileIsNotValid" xml:space="preserve">
    <value>The imported file is not valid</value>
  </data>
  <data name="TEXT_InputAlphabetIsNoSubsetOfTapeAlphabet" xml:space="preserve">
    <value>Input alphabet has to be a subset of tape alphabet</value>
  </data>
  <data name="TEXT_HelpWindow_00" xml:space="preserve">
    <value>This introduction is meant to familiarize you with using the application and turing machines.</value>
  </data>
  <data name="TEXT_HelpWindow_01" xml:space="preserve">
    <value>This chapter will teach you how to create a turing machine from scratch that can convert the input word "ABC" to "123" using only the table.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_00" xml:space="preserve">
    <value>Welcome to TMSim</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_01" xml:space="preserve">
    <value>How to use the table</value>
  </data>
  <data name="TEXT_HelpWindow_10" xml:space="preserve">
    <value>Rightclick on a state and then click on "Add Transition".
How to read the newly opened textbox:
The turing machine is in the state "Start" and reads the symbol "A" on the tape. 
The turing machine then replaces "A" with "1" and moves one cell to the right. 
The turing machine is now in the state "q1".</value>
  </data>
  <data name="TEXT_HelpWindow_11" xml:space="preserve">
    <value>If your diagram looks like this then it can transform the input word "ABC" to "123".
Now that you have written a simple turing machine you can experiment with more complex and therefor interesting ones.
If you need some inspiration then have a look at the included examples.</value>
  </data>
  <data name="TEXT_HelpWindow_02" xml:space="preserve">
    <value>The checkbox at (2)  decides whether the newly added character should be in the input alphabet or not. If it's in the input alphabet then you can use it in your input word to write on the tape. Otherwise only the turing machine can write it on the tape.
You can edit or remove symbols by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_03" xml:space="preserve">
    <value>The checkbox "Start" determines if this state is where the turing machine starts. There can only be one start state at a time. The first added state is always a start state.
The checkbox "Accepting" determines whether the state is an end state. There can be multiple end states at a time.
You can edit or remove states by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_04" xml:space="preserve">
    <value>Repeat the last two steps until the table looks like this.</value>
  </data>
  <data name="TEXT_HelpWindow_05" xml:space="preserve">
    <value>How to read this textbox:
The turing machine is in the state "Start" and reads the symbol "A" on the tape. 
The turing machine then replaces "A" with "1" and moves one cell to the right. 
The turing machine is now in the state "q1".</value>
  </data>
  <data name="TEXT_HelpWindow_06" xml:space="preserve">
    <value>If your table looks like this then it can transform the input word "ABC" to "123".
Now that you have written a simple turing machine you can experiment with more complex and therefor interesting ones.
If you need some inspiration then have a look at the included examples.</value>
  </data>
  <data name="TEXT_HelpWindow_07" xml:space="preserve">
    <value>This chapter will teach you how to create a turing machine from scratch that can convert the input word "ABC" to "123" using only the diagram.</value>
  </data>
  <data name="TEXT_HelpWindow_08" xml:space="preserve">
    <value>Rightclick on an empty space of the diagram allows you to add new transitions.
The checkbox "Start" determines if this state is where the turing machine starts. There can only be one start state at a time. The first added state is always a start state.
The checkbox "Accepting" determines whether the state is an end state. There can be multiple end states at a time.
You can edit or remove states by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_09" xml:space="preserve">
    <value>For this to work there needs to be at least one state in the diagram.
Rightclick on a state and then click on "Add Transition" (1).
Now click on "Add Symbol" (2).
The checkbox at (3)  decides whether the newly added character should be in the input alphabet or not. If it's in the input alphabet then you can use it in your input word to write on the tape. Otherwise only the turing machine can write it on the tape.
You can edit or remove symbols by rightclicking on them.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_10" xml:space="preserve">
    <value>Adding a new transition</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_11" xml:space="preserve">
    <value>Final result</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_02" xml:space="preserve">
    <value>Adding a new symbol</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_03" xml:space="preserve">
    <value>Adding a new state</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_04" xml:space="preserve">
    <value>Current goal</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_05" xml:space="preserve">
    <value>Adding a new transition</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_06" xml:space="preserve">
    <value>Final result</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_07" xml:space="preserve">
    <value>How to use the diagram</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_08" xml:space="preserve">
    <value>Adding a new state</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_09" xml:space="preserve">
    <value>Adding a new symbol</value>
  </data>
  <data name="TEXT_Warn_Memory" xml:space="preserve">
    <value>The saving process could not be executed properly.</value>
  </data>
  <data name="TEXT_Warn_Transformation4" xml:space="preserve">
    <value>Transformation 4 can not be executed currently. Please check, that the startstate is not an endstate and the RWH is never neutral.</value>
  </data>
  <data name="TEXT_Warn_Transformation5" xml:space="preserve">
    <value>Transformation 4 can not be executed currently. Please check, that there is at least one accepting state.</value>
  </data>
  <data name="TEXT_AddTransition" xml:space="preserve">
    <value>Add Transition</value>
  </data>
  <data name="TEXT_EditState" xml:space="preserve">
    <value>Edit State</value>
  </data>
  <data name="TEXT_EditSymbol" xml:space="preserve">
    <value>Edit Symbol</value>
  </data>
  <data name="TEXT_EditTransition" xml:space="preserve">
    <value>Edit Transition</value>
  </data>
  <data name="TEXT_NextBtn" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="TEXT_PrevBtn" xml:space="preserve">
    <value>Prev</value>
  </data>
  <data name="TEXT_RemoveState" xml:space="preserve">
    <value>Remove State</value>
  </data>
  <data name="TEXT_RemoveSymbol" xml:space="preserve">
    <value>Remove Symbol</value>
  </data>
  <data name="TEXT_RemoveTransition" xml:space="preserve">
    <value>Remove Transition</value>
  </data>
  <data name="TEXT_Table" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="TEXT_AddSymbol" xml:space="preserve">
    <value>Add Symbol</value>
  </data>
  <data name="TEXT_PopupIsBlankChar" xml:space="preserve">
    <value>Blank character</value>
  </data>
  <data name="TEXT_Warn_BlankCharMustBeSet" xml:space="preserve">
    <value>The blank character must be set</value>
  </data>
  <data name="TEXT_Warn_SymbolIsInputAndBlank" xml:space="preserve">
    <value>The symbol can't be in the input alphabet while also being the blank character</value>
  </data>
  <data name="TEXT_Warn_NoStartState" xml:space="preserve">
    <value>There is no start state!</value>
  </data>
  <data name="TEXT_Warn_UnsupportedLanguage" xml:space="preserve">
    <value>This language is not supported!</value>
  </data>
  <data name="TEXT_AddState" xml:space="preserve">
    <value>Add State</value>
  </data>
  <data name="TEXT_Animate" xml:space="preserve">
    <value>Animate</value>
  </data>
  <data name="TEXT_Arrange" xml:space="preserve">
    <value>Arrange</value>
  </data>
  <data name="TEXT_Warn_SymbolAlreadyExists" xml:space="preserve">
    <value>At least one symbol in the tape alphabet appears twice!</value>
  </data>
  <data name="TEXT_Warn_SymbolDoesNotExist" xml:space="preserve">
    <value>Not all symbols that the turing machine uses are part of the input alphabet!</value>
  </data>
</root>