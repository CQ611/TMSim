<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TEXT_English" xml:space="preserve">
    <value>Englisch</value>
  </data>
  <data name="TEXT_Examples" xml:space="preserve">
    <value>Beis_piele</value>
  </data>
  <data name="TEXT_Exit" xml:space="preserve">
    <value>S_chließen</value>
  </data>
  <data name="TEXT_File" xml:space="preserve">
    <value>_Datei</value>
  </data>
  <data name="TEXT_German" xml:space="preserve">
    <value>Deutsch</value>
  </data>
  <data name="TEXT_Highlight" xml:space="preserve">
    <value>Zustand _hervorheben</value>
  </data>
  <data name="TEXT_Inputword" xml:space="preserve">
    <value>Eingabe_wort: </value>
  </data>
  <data name="TEXT_Language" xml:space="preserve">
    <value>Sprache</value>
  </data>
  <data name="TEXT_New" xml:space="preserve">
    <value>_Neu</value>
  </data>
  <data name="TEXT_Open" xml:space="preserve">
    <value>Ö_ffnen</value>
  </data>
  <data name="TEXT_PopupAccept" xml:space="preserve">
    <value>Akzeptieren</value>
  </data>
  <data name="TEXT_PopupBlank" xml:space="preserve">
    <value>Neues Leerzeichen:</value>
  </data>
  <data name="TEXT_PopupAddSymbol" xml:space="preserve">
    <value>Symbol hinzufügen</value>
  </data>
  <data name="TEXT_PopupCancel" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="TEXT_PopupIdentifier" xml:space="preserve">
    <value>Kennung</value>
  </data>
  <data name="TEXT_PopupIdentifierText" xml:space="preserve">
    <value>Das sollte nicht sichtbar sein!</value>
  </data>
  <data name="TEXT_PopupIsInputAlphabet" xml:space="preserve">
    <value>Eingabealphabet</value>
  </data>
  <data name="TEXT_PopupOK" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="TEXT_PopupStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TEXT_PopupSymbol" xml:space="preserve">
    <value>Symbol:</value>
  </data>
  <data name="TEXT_Preferences" xml:space="preserve">
    <value>_Einstellungen</value>
  </data>
  <data name="TEXT_Save" xml:space="preserve">
    <value>_Speichern</value>
  </data>
  <data name="TEXT_SpeedLabel" xml:space="preserve">
    <value>Tempo:</value>
  </data>
  <data name="TEXT_Transform" xml:space="preserve">
    <value>Transformieren</value>
  </data>
  <data name="TEXT_Transformation1" xml:space="preserve">
    <value>Transformation #1</value>
  </data>
  <data name="TEXT_Transformation2" xml:space="preserve">
    <value>Transformation #2</value>
  </data>
  <data name="TEXT_Transformation3" xml:space="preserve">
    <value>Transformation #3</value>
  </data>
  <data name="TEXT_Transformation4" xml:space="preserve">
    <value>Transformation #4</value>
  </data>
  <data name="TEXT_Transformation5" xml:space="preserve">
    <value>Transformation #5</value>
  </data>
  <data name="TEXT_Upload" xml:space="preserve">
    <value>_Laden</value>
  </data>
  <data name="TEXT_Comment" xml:space="preserve">
    <value>Kommentar</value>
  </data>
  <data name="TEXT_Direction" xml:space="preserve">
    <value>Richtung</value>
  </data>
  <data name="TEXT_ReadSymbols" xml:space="preserve">
    <value>Lesesymbole</value>
  </data>
  <data name="TEXT_SourceState" xml:space="preserve">
    <value>Ausgangszustand</value>
  </data>
  <data name="TEXT_Tapes" xml:space="preserve">
    <value> Band/Bänder!</value>
  </data>
  <data name="TEXT_TargetState" xml:space="preserve">
    <value>Zielzustand</value>
  </data>
  <data name="TEXT_Warn_SymCount" xml:space="preserve">
    <value> Symbole, aber es gibt </value>
  </data>
  <data name="TEXT_Warn_SymReCount" xml:space="preserve">
    <value>Lesesymbole enthalten </value>
  </data>
  <data name="TEXT_Warn_SymWrCount" xml:space="preserve">
    <value>Schreibsymbole enthalten </value>
  </data>
  <data name="TEXT_WriteSymbols" xml:space="preserve">
    <value>Schreibsymbole</value>
  </data>
  <data name="TOOLTIP_Eingabe" xml:space="preserve">
    <value>Eingabewort hier eingeben</value>
  </data>
  <data name="TOOLTIP_Pause" xml:space="preserve">
    <value>Pausieren</value>
  </data>
  <data name="TOOLTIP_Play" xml:space="preserve">
    <value>Animation starten</value>
  </data>
  <data name="TOOLTIP_Speed" xml:space="preserve">
    <value>Geschwindigkeitsregler</value>
  </data>
  <data name="TOOLTIP_Step" xml:space="preserve">
    <value>Schritt</value>
  </data>
  <data name="TOOLTIP_Stop" xml:space="preserve">
    <value>Stoppen</value>
  </data>
  <data name="TOOLTIP_Transformation1" xml:space="preserve">
    <value>Kein Übergang führt in den Startzustand und keiner der Übergänge beginnt in einem akzeptierenden Zustand</value>
  </data>
  <data name="TOOLTIP_Transformation2" xml:space="preserve">
    <value>Es gibt keine Zustandsübergänge mit unbewegtem Lese-/Schreibkopf</value>
  </data>
  <data name="TOOLTIP_Transformation3" xml:space="preserve">
    <value>Es wird das Leerzeichen nicht geschrieben</value>
  </data>
  <data name="TOOLTIP_Transformation4" xml:space="preserve">
    <value>Die Zustandsmenge ist in eine rechte und linke Hälfte geteilt</value>
  </data>
  <data name="TOOLTIP_Transformation5" xml:space="preserve">
    <value>Es gibt genau einen akzeptierenden Zustand</value>
  </data>
  <data name="TOOLTIP_Upload" xml:space="preserve">
    <value>Eingabewort auf das Band hochladen</value>
  </data>
  <data name="TEXT_DiagramView" xml:space="preserve">
    <value>Diagramm</value>
  </data>
  <data name="TEXT_TableView" xml:space="preserve">
    <value>Tabelle</value>
  </data>
  <data name="TEXT_View" xml:space="preserve">
    <value>Ansicht</value>
  </data>
  <data name="TEXT_InvalidInputWord" xml:space="preserve">
    <value>Das Eingabewort ist nicht gültig!</value>
  </data>
  <data name="TEXT_InvalidTapeNumberInDefinition" xml:space="preserve">
    <value>Die Anzahl der Bänder stimmt nicht mit der Zustandsübergangsdefinition überein!</value>
  </data>
  <data name="TEXT_ReadSymbolDoesNotExist" xml:space="preserve">
    <value>Das zu lesende Symbol befindet sich nicht im Bandalphabet!</value>
  </data>
  <data name="TEXT_SourceStateDoesNotExist" xml:space="preserve">
    <value>Der Anfangszustand des Zustandsübergangs existiert nicht!</value>
  </data>
  <data name="TEXT_StateDoesNotExist" xml:space="preserve">
    <value>Der Zustand existiert nicht!</value>
  </data>
  <data name="TEXT_StateExists" xml:space="preserve">
    <value>Der Zustand existiert bereits!</value>
  </data>
  <data name="TEXT_SymbolDoesNotExist" xml:space="preserve">
    <value>Das Symbol befindet sich nicht im Bandalphabet!</value>
  </data>
  <data name="TEXT_SymbolExists" xml:space="preserve">
    <value>Das Symbol befindet sich bereits im Bandalphabet!</value>
  </data>
  <data name="TEXT_TargetStateDoesNotExist" xml:space="preserve">
    <value>Der Zielzustand des Zustandsübergangs existiert nicht!</value>
  </data>
  <data name="TEXT_TransitionDoesNotExist" xml:space="preserve">
    <value>Der Zustandsübergang existiert nicht!</value>
  </data>
  <data name="TEXT_TransitionExists" xml:space="preserve">
    <value>Der Zustandsübergang existiert bereits!</value>
  </data>
  <data name="TEXT_WriteSymbolDoesNotExist" xml:space="preserve">
    <value>Das zu schreibende Symbol befindet sich nicht im Bandalphabet!</value>
  </data>
  <data name="TEXT_Info_DefaultMessage" xml:space="preserve">
    <value>Willkommen zu TMSim</value>
  </data>
  <data name="TEXT_Info_SimulationFailure" xml:space="preserve">
    <value>Kein Endzustand wurde erreicht</value>
  </data>
  <data name="TEXT_Info_SimulationIsPaused" xml:space="preserve">
    <value>Simulation ist pausiert</value>
  </data>
  <data name="TEXT_Info_SimulationIsRunning" xml:space="preserve">
    <value>Simulation läuft</value>
  </data>
  <data name="TEXT_Info_SimulationIsStopped" xml:space="preserve">
    <value>Simulation wurde abgebrochen</value>
  </data>
  <data name="TEXT_Info_SimulationSingleStep" xml:space="preserve">
    <value>Einzelschritt ausgeführt</value>
  </data>
  <data name="TEXT_Info_SimulationSuccess" xml:space="preserve">
    <value>Endzustand wurde erreicht</value>
  </data>
  <data name="TEXT_DefinitionDiagramm" xml:space="preserve">
    <value>Definition als Diagramm</value>
  </data>
  <data name="TEXT_DefinitionTabelle" xml:space="preserve">
    <value>Definition als Tabelle</value>
  </data>
  <data name="TEXT_Info_InputWordWrittenOnTape" xml:space="preserve">
    <value>Eingabewort auf Band geschrieben</value>
  </data>
  <data name="TEXT_ImportFileIsNotValid" xml:space="preserve">
    <value>Die importierte Datei ist ungültig</value>
  </data>
  <data name="TEXT_InputAlphabetIsNoSubsetOfTapeAlphabet" xml:space="preserve">
    <value>Das Eingabealphabet muss eine Teilmenge des Bandalphabets sein</value>
  </data>
  <data name="TEXT_HelpWindow_00" xml:space="preserve">
    <value>Diese Einführung dient dazu Sie mit dem Bedienen der Anwendung und Turingmaschinen vertraut zu machen.</value>
  </data>
  <data name="TEXT_HelpWindow_01" xml:space="preserve">
    <value>Dieser Abschnitt zeigt Ihnen, wie Sie nur mit der Tabelle eine neue Turingmaschine erstellen können, die das Eingabewort "ABC" in "123" umwandelt.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_00" xml:space="preserve">
    <value>Willkommen zu TMSim</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_01" xml:space="preserve">
    <value>Wie man die Tabelle benutzt</value>
  </data>
  <data name="TEXT_HelpWindow_10" xml:space="preserve">
    <value>Rechtsklicken Sie auf einen Zustand und wählen Sie "Add Transition".
Wie man diese neu geöffnete Textbox liest:
Die Turingmaschine befindet sich in Zustand "Start" und ist aktuell über dem Zeichen "A" auf dem Band. 
Die Turingmaschine ersetzt "A" durch "1" und bewegt sich eine Zelle nach rechts. 
Die Turingmaschine ist nun im Zustand "q1".</value>
  </data>
  <data name="TEXT_HelpWindow_11" xml:space="preserve">
    <value>Wenn Ihr Diagramm genauso aussieht, wie hier gezeigt, dann kan die Turingmaschine das Eingabewort "ABC" in "123" umwandeln.
Da Sie jetzt den Umgang mit dem Diagramm kennen, können Sie sich an komplexere und damit auch interessantere Turingmaschinen wagen.
Wollen Sie sich inspirieren lassen, dann können Sie in den verfügbaren Beispielen stöbern.</value>
  </data>
  <data name="TEXT_HelpWindow_02" xml:space="preserve">
    <value>Mit dem Kontrollkästchen bei (2) entscheiden Sie, ob das neue Zeichen im Eingabealphabet enthalten sein soll. Ist es im Eingabealphabet können Sie es im Eingabewort verwenden und auf das Band schreiben. Andernfalls kann es nur die Turingmaschine auf das Band schreiben.
Sie können Symbole nachträglich durch einen Rechtsklick editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_03" xml:space="preserve">
    <value>Das Kontrollkästchen "Start" legt fest, ob die Turingmaschine in diesem Zustand starten soll. Es kann nur maximal einen Startzustand geben. Der erste hinzugefügte Zustand ist immer der Startzustand sein.
Das Kontrollkästchen "Akzeptieren" legt fest, ob dieser Zustand ein Endzustand ist. Es kann mehrere Endzustände geben.
Sie können Zustände nachträglich durch einen Rechtsklick editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_04" xml:space="preserve">
    <value>Wiederholen Sie die letzten zwei Schritte bis die Tabelle so aussieht.</value>
  </data>
  <data name="TEXT_HelpWindow_05" xml:space="preserve">
    <value>Wie man diese Textbox liest:
Die Turingmaschine befindet sich in Zustand "Start" und ist aktuell über dem Zeichen "A" auf dem Band. 
Die Turingmaschine ersetzt "A" durch "1" und bewegt sich eine Zelle nach rechts. 
Die Turingmaschine ist nun im Zustand "q1".</value>
  </data>
  <data name="TEXT_HelpWindow_06" xml:space="preserve">
    <value>Wenn Ihre Tabelle genauso aussieht. wie hier gezeigt, dann kann die Turingmaschine das Eingabewort "ABC" in "123" umwandeln.
Da Sie jetzt den Umgang mit der Tabelle kennen, können Sie sich an komplexere und damit auch interessantere Turingmaschinen wagen.
Wollen Sie sich inspirieren lassen, dann können Sie in den verfügbaren Beispielen stöbern.</value>
  </data>
  <data name="TEXT_HelpWindow_07" xml:space="preserve">
    <value>Dieser Abschnitt zeigt Ihnen, wie Sie nur mit dem Diagramm eine neue Turingmaschine erstellen können, die das Eingabewort "ABC" in "123" umwandelt.</value>
  </data>
  <data name="TEXT_HelpWindow_08" xml:space="preserve">
    <value>Mit einem Rechtsklick auf den leeren Platz des Diagramms kann ein neuer Zustand hinzugefügt werden.
Das Kontrollkästchen "Start" legt fest, ob die Turingmaschine in diesem Zustand starten soll. Es kann nur maximal einen Startzustand geben. Der erste hinzugefügte Zustand ist immer der Startzustand sein.
Das Kontrollkästchen "Akzeptieren" legt fest, ob dieser Zustand ein Endzustand ist. Es kann mehrere Endzustände geben.
Sie können Zustände nachträglich durch einen Rechtsklick editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_09" xml:space="preserve">
    <value>Hierfür muss mindestens ein Zustand im Diagramm vorhanden sein.
Rechtsklicken Sie auf einen Zustand und wählen Sie "Add Transition" (1) aus.
Klicken Sie nun auf "Symbol hinzufügen" (2).
Mit dem Kontrollkästchen bei (3) entscheiden Sie, ob das neue Zeichen im Eingabealphabet enthalten sein soll. Ist es im Eingabealphabet können Sie es im Eingabewort verwenden und auf das Band schreiben. Andernfalls kann es nur die Turingmaschine auf das Band schreiben.
Sie können Symbole nachträglich editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_10" xml:space="preserve">
    <value>Hinzufügen eines Zustandsübergangs</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_11" xml:space="preserve">
    <value>Endresultat</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_02" xml:space="preserve">
    <value>Hinzufügen eines Symbols</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_03" xml:space="preserve">
    <value>Hinzufügen eines Zustands</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_04" xml:space="preserve">
    <value>Aktuelles Ziel</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_05" xml:space="preserve">
    <value>Hinzufügen eines Zustandsübergangs</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_06" xml:space="preserve">
    <value>Endresultat</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_07" xml:space="preserve">
    <value>Wie man das Diagramm benutzt</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_08" xml:space="preserve">
    <value>Hinzufügen eines Zustands</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_09" xml:space="preserve">
    <value>Hinzufügen eines Symbols</value>
  </data>
  <data name="TEXT_Warn_Memory" xml:space="preserve">
    <value>Das Speichern hat aufgrund eines Fehlers nicht funktioniert.</value>
  </data>
  <data name="TEXT_Warn_Transformation4" xml:space="preserve">
    <value>Transformation 4 kann momentan nicht ausgeführt werden. Bitte überprüfen, dass der Startzustand kein Endzustand ist und der LSK niemals unbewegt ist.</value>
  </data>
  <data name="TEXT_Warn_Transformation5" xml:space="preserve">
    <value>Transformation 5 kann momentan nicht ausgeführt werden. Bitte überprüfen, dass es mindestens ein akzeptierender Zustand existiert.</value>
  </data>
  <data name="TEXT_AddTransition" xml:space="preserve">
    <value>Transition hinzufügen</value>
  </data>
  <data name="TEXT_EditState" xml:space="preserve">
    <value>Zustand beabeiten</value>
  </data>
  <data name="TEXT_EditSymbol" xml:space="preserve">
    <value>Zeichen bearbeiten</value>
  </data>
  <data name="TEXT_EditTransition" xml:space="preserve">
    <value>Transition bearbeiten</value>
  </data>
  <data name="TEXT_NextBtn" xml:space="preserve">
    <value>Weiter</value>
  </data>
  <data name="TEXT_PrevBtn" xml:space="preserve">
    <value>Zurück</value>
  </data>
  <data name="TEXT_RemoveState" xml:space="preserve">
    <value>Zustand entfernen</value>
  </data>
  <data name="TEXT_RemoveSymbol" xml:space="preserve">
    <value>Zeichen entfernen</value>
  </data>
  <data name="TEXT_RemoveTransition" xml:space="preserve">
    <value>Transition entfernen</value>
  </data>
  <data name="TEXT_Table" xml:space="preserve">
    <value>Tabelle</value>
  </data>
  <data name="TEXT_AddSymbol" xml:space="preserve">
    <value>Zeichen hinzufügen</value>
  </data>
  <data name="TEXT_PopupIsBlankChar" xml:space="preserve">
    <value>Leerzeichen</value>
  </data>
  <data name="TEXT_Warn_BlankCharMustBeSet" xml:space="preserve">
    <value>Das Leerzeichen muss festgelegt sein</value>
  </data>
  <data name="TEXT_Warn_SymbolIsInputAndBlank" xml:space="preserve">
    <value>Das Zeichen kann nicht gleichzeitig im Eingabealphabet vorkommen und das Leerzeichen sein </value>
  </data>
  <data name="TEXT_Warn_NoStartState" xml:space="preserve">
    <value>Es gibt keinen Startzustand!</value>
  </data>
  <data name="TEXT_Warn_UnsupportedLanguage" xml:space="preserve">
    <value>Diese Sprache steht wird nicht unterstützt!</value>
  </data>
  <data name="TEXT_AddState" xml:space="preserve">
    <value>Zustand hinzufügen</value>
  </data>
  <data name="TEXT_Animate" xml:space="preserve">
    <value>Animation</value>
  </data>
  <data name="TEXT_Arrange" xml:space="preserve">
    <value>Anordnen</value>
  </data>
  <data name="TEXT_Warn_SymbolAlreadyExists" xml:space="preserve">
    <value>Im Bandalphabet ist mindestens ein Zeichen doppelt!</value>
  </data>
  <data name="TEXT_Warn_SymbolDoesNotExist" xml:space="preserve">
    <value>Nicht alle Zeichen die die Turingmaschine verwendet sind im Bandalphabet vorhanden!</value>
  </data>
  <data name="TEXT_Warn_Transformation1" xml:space="preserve">
    <value>Transformation 1 kann momentan nicht ausgeführt werden. Bitte überprüfen, ob es einen Startzustand und/oder Endzustand gibt!</value>
  </data>
</root>