<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TEXT_English" xml:space="preserve">
    <value>E_nglisch</value>
  </data>
  <data name="TEXT_Examples" xml:space="preserve">
    <value>Beis_piele</value>
  </data>
  <data name="TEXT_Exit" xml:space="preserve">
    <value>S_chließen</value>
  </data>
  <data name="TEXT_File" xml:space="preserve">
    <value>_Datei</value>
  </data>
  <data name="TEXT_German" xml:space="preserve">
    <value>De_utsch</value>
  </data>
  <data name="TEXT_Highlight" xml:space="preserve">
    <value>Zustand _hervorheben</value>
  </data>
  <data name="TEXT_Inputword" xml:space="preserve">
    <value>Eingabe_wort: </value>
  </data>
  <data name="TEXT_Language" xml:space="preserve">
    <value>_Sprache</value>
  </data>
  <data name="TEXT_New" xml:space="preserve">
    <value>_Neu</value>
  </data>
  <data name="TEXT_Open" xml:space="preserve">
    <value>Ö_ffnen</value>
  </data>
  <data name="TEXT_PopupAccept" xml:space="preserve">
    <value>Akzeptieren</value>
  </data>
  <data name="TEXT_PopupBlank" xml:space="preserve">
    <value>Ersatzsymbol für geschriebenes Leerzeichen:</value>
  </data>
  <data name="TEXT_PopupAddSymbol" xml:space="preserve">
    <value>Symbol hinzufügen</value>
  </data>
  <data name="TEXT_PopupCancel" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="TEXT_PopupIdentifier" xml:space="preserve">
    <value>Kennung</value>
  </data>
  <data name="TEXT_PopupIdentifierText" xml:space="preserve">
    <value>Das sollte nicht sichtbar sein!</value>
  </data>
  <data name="TEXT_PopupIsInputAlphabet" xml:space="preserve">
    <value>Eingabealphabet</value>
  </data>
  <data name="TEXT_PopupOK" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="TEXT_PopupStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TEXT_PopupSymbol" xml:space="preserve">
    <value>Symbol:</value>
  </data>
  <data name="TEXT_Preferences" xml:space="preserve">
    <value>_Einstellungen</value>
  </data>
  <data name="TEXT_Save" xml:space="preserve">
    <value>_Speichern</value>
  </data>
  <data name="TEXT_SpeedLabel" xml:space="preserve">
    <value>Tempo:</value>
  </data>
  <data name="TEXT_Transform" xml:space="preserve">
    <value>_Transformieren</value>
  </data>
  <data name="TEXT_Transformation1" xml:space="preserve">
    <value>Transformation #_1</value>
  </data>
  <data name="TEXT_Transformation2" xml:space="preserve">
    <value>Transformation #_2</value>
  </data>
  <data name="TEXT_Transformation3" xml:space="preserve">
    <value>Transformation #_3</value>
  </data>
  <data name="TEXT_Transformation4" xml:space="preserve">
    <value>Transformation #_4</value>
  </data>
  <data name="TEXT_Transformation5" xml:space="preserve">
    <value>Transformation #_5</value>
  </data>
  <data name="TEXT_Upload" xml:space="preserve">
    <value>_Laden</value>
  </data>
  <data name="TEXT_Comment" xml:space="preserve">
    <value>Kommentar</value>
  </data>
  <data name="TEXT_Direction" xml:space="preserve">
    <value>Richtung</value>
  </data>
  <data name="TEXT_ReadSymbols" xml:space="preserve">
    <value>Lesesymbole</value>
  </data>
  <data name="TEXT_SourceState" xml:space="preserve">
    <value>Ausgangszustand</value>
  </data>
  <data name="TEXT_Tapes" xml:space="preserve">
    <value>Band/Bänder!</value>
  </data>
  <data name="TEXT_TargetState" xml:space="preserve">
    <value>Zielzustand</value>
  </data>
  <data name="TEXT_Warn_SymCount" xml:space="preserve">
    <value> Symbole, aber es gibt </value>
  </data>
  <data name="TEXT_Warn_SymReCount" xml:space="preserve">
    <value>Lesesymbole enthalten </value>
  </data>
  <data name="TEXT_Warn_SymWrCount" xml:space="preserve">
    <value>Schreibsymbole enthalten </value>
  </data>
  <data name="TEXT_WriteSymbols" xml:space="preserve">
    <value>Schreibsymbole</value>
  </data>
  <data name="TOOLTIP_Eingabe" xml:space="preserve">
    <value>Eingabewort hier eingeben</value>
  </data>
  <data name="TOOLTIP_Pause" xml:space="preserve">
    <value>Pausieren</value>
  </data>
  <data name="TOOLTIP_Play" xml:space="preserve">
    <value>Animation starten</value>
  </data>
  <data name="TOOLTIP_Speed" xml:space="preserve">
    <value>Geschwindigkeitsregler</value>
  </data>
  <data name="TOOLTIP_Step" xml:space="preserve">
    <value>Schritt</value>
  </data>
  <data name="TOOLTIP_Stop" xml:space="preserve">
    <value>Stoppen</value>
  </data>
  <data name="TOOLTIP_Transformation1" xml:space="preserve">
    <value>Kein Übergang führt in den Startzustand und keiner der Übergänge beginnt in einem akzeptierenden Zustand</value>
  </data>
  <data name="TOOLTIP_Transformation2" xml:space="preserve">
    <value>Es gibt keine Zustandsübergänge mit unbewegtem Lese-/Schreibkopf</value>
  </data>
  <data name="TOOLTIP_Transformation3" xml:space="preserve">
    <value>Das Leerzeichen wird nicht geschrieben</value>
  </data>
  <data name="TOOLTIP_Transformation4" xml:space="preserve">
    <value>Die Zustandsmenge ist in eine rechte und linke Hälfte geteilt</value>
  </data>
  <data name="TOOLTIP_Transformation5" xml:space="preserve">
    <value>Es gibt genau einen akzeptierenden Zustand</value>
  </data>
  <data name="TOOLTIP_Upload" xml:space="preserve">
    <value>Eingabewort auf das Band schreiben</value>
  </data>
  <data name="TEXT_DiagramView" xml:space="preserve">
    <value>D_iagramm</value>
  </data>
  <data name="TEXT_TableView" xml:space="preserve">
    <value>Tabe_lle</value>
  </data>
  <data name="TEXT_View" xml:space="preserve">
    <value>_Ansicht</value>
  </data>
  <data name="TEXT_InvalidInputWord" xml:space="preserve">
    <value>Das Eingabewort ist nicht gültig!</value>
  </data>
  <data name="TEXT_InvalidTapeNumberInDefinition" xml:space="preserve">
    <value>Die Anzahl der Bänder stimmt nicht mit der Zustandsübergangsdefinition überein!</value>
  </data>
  <data name="TEXT_ReadSymbolDoesNotExist" xml:space="preserve">
    <value>Das zu lesende Symbol befindet sich nicht im Bandalphabet!</value>
  </data>
  <data name="TEXT_SourceStateDoesNotExist" xml:space="preserve">
    <value>Der Anfangszustand des Zustandsübergangs existiert nicht!</value>
  </data>
  <data name="TEXT_StateDoesNotExist" xml:space="preserve">
    <value>Der Zustand existiert nicht!</value>
  </data>
  <data name="TEXT_StateExists" xml:space="preserve">
    <value>Der Zustand existiert bereits!</value>
  </data>
  <data name="TEXT_SymbolDoesNotExist" xml:space="preserve">
    <value>Das Symbol befindet sich nicht im Bandalphabet!</value>
  </data>
  <data name="TEXT_SymbolExists" xml:space="preserve">
    <value>Das Symbol befindet sich bereits im Bandalphabet!</value>
  </data>
  <data name="TEXT_TargetStateDoesNotExist" xml:space="preserve">
    <value>Der Zielzustand des Zustandsübergangs existiert nicht!</value>
  </data>
  <data name="TEXT_TransitionDoesNotExist" xml:space="preserve">
    <value>Der Zustandsübergang existiert nicht!</value>
  </data>
  <data name="TEXT_TransitionExists" xml:space="preserve">
    <value>Der Zustandsübergang existiert bereits!</value>
  </data>
  <data name="TEXT_WriteSymbolDoesNotExist" xml:space="preserve">
    <value>Das zu schreibende Symbol befindet sich nicht im Bandalphabet!</value>
  </data>
  <data name="TEXT_Info_DefaultMessage" xml:space="preserve">
    <value>Willkommen zu TMSim</value>
  </data>
  <data name="TEXT_Info_SimulationFailure" xml:space="preserve">
    <value>Kein Endzustand wurde erreicht</value>
  </data>
  <data name="TEXT_Info_SimulationIsPaused" xml:space="preserve">
    <value>Simulation ist pausiert</value>
  </data>
  <data name="TEXT_Info_SimulationIsRunning" xml:space="preserve">
    <value>Simulation läuft</value>
  </data>
  <data name="TEXT_Info_SimulationIsStopped" xml:space="preserve">
    <value>Simulation wurde abgebrochen</value>
  </data>
  <data name="TEXT_Info_SimulationSingleStep" xml:space="preserve">
    <value>Einzelschritt ausgeführt</value>
  </data>
  <data name="TEXT_Info_SimulationSuccess" xml:space="preserve">
    <value>Endzustand wurde erreicht</value>
  </data>
  <data name="TEXT_DefinitionDiagram" xml:space="preserve">
    <value>Definition als Diagramm</value>
  </data>
  <data name="TEXT_DefinitionTable" xml:space="preserve">
    <value>Definition als Tabelle</value>
  </data>
  <data name="TEXT_Info_InputWordWrittenOnTape" xml:space="preserve">
    <value>Eingabewort auf Band geschrieben</value>
  </data>
  <data name="TEXT_ImportFileIsNotValid" xml:space="preserve">
    <value>Die importierte Datei ist ungültig</value>
  </data>
  <data name="TEXT_InputAlphabetIsNoSubsetOfTapeAlphabet" xml:space="preserve">
    <value>Das Eingabealphabet muss eine Teilmenge des Bandalphabets sein</value>
  </data>
  <data name="TEXT_HelpWindow_00" xml:space="preserve">
    <value>Diese Einführung dient dazu Sie mit dem Bedienen der Anwendung und Turingmaschinen vertraut zu machen.</value>
  </data>
  <data name="TEXT_HelpWindow_07" xml:space="preserve">
    <value>Dieser Abschnitt zeigt Ihnen, wie Sie nur mit der Tabelle eine neue Turingmaschine erstellen können, die Ihr Eingabewort daraufhin überprüft, ob die Anzahl der eingegebenen Nullen gerade ist oder nicht.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_00" xml:space="preserve">
    <value>Willkommen zu TMSim</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_07" xml:space="preserve">
    <value>Wie man die Tabelle benutzt</value>
  </data>
  <data name="TEXT_HelpWindow_17" xml:space="preserve">
    <value>Mit einem Rechtsklick auf einen Zustand öffnet sich ein Menü, über das Sie einen neuen Zustandsübergang hinzufügen können. Sie können auch auf einen Zustand rechtsklicken und diese Taste erst loslassen, wenn Sie Ihren Zielzustand erreicht haben, um direkt in das Popup zu gelangen.
Wie man das sich nun öffnende Popup liest:
Die Turingmaschine befindet sich in Zustand "Start" und der Lese-/Schreibkopf ist aktuell über dem Zeichen "0" auf dem Band. 
Die Turingmaschine ersetzt "0" durch "0" und bewegt sich eine Zelle nach rechts. 
Die Turingmaschine ist nun im Zustand "q1".
Der rote Punkt bei (1) signalisiert, dass dieser Zustandsübergang einen Kommentar besitzt. Positionieren Sie Ihre Maus über dem grau hinterlegten Text um ihn anzuzeigen.
Sie können Zustandübergänge nachträglich über einen Rechtsklick auf den grau hinterlegten Text editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_18" xml:space="preserve">
    <value>Wenn Ihr Diagramm und Alphabet genauso aussieht, wie hier gezeigt, dann kann die Turingmaschine bestimmen, ob Ihr Eingabewort eine gerade oder ungerade Anzahl an Nullen enthält. Ist die Anzahl gerade erreicht Sie einen akzeptierenden Endzustand, ansonsten nicht.
Da Sie jetzt den Umgang mit dem Diagramm kennen, können Sie sich an komplexere und damit auch interessantere Turingmaschinen wagen.
Wollen Sie sich inspirieren lassen, dann können Sie in den verfügbaren Beispielen stöbern.</value>
  </data>
  <data name="TEXT_HelpWindow_08" xml:space="preserve">
    <value>Mit dem Kontrollkästchen bei (1) entscheiden Sie, ob das neue Zeichen im Eingabealphabet enthalten sein soll. Damit kann es im Eingabewort verwendet werden.
Diese Zeichen werden fettgedruckt abgebildet.
Mit dem Kontrollkästchen bei (2) entscheiden Sie, ob das neue Zeichen das Leerzeichen darstellen soll. Es muss immer ein Leerzeichen explizit von Ihnen festgelegt werden. Dieses Zeichen ist rot gefärbt.
Sie können Zeichen nachträglich durch einen Rechtsklick auf diese editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_09" xml:space="preserve">
    <value>Das Kontrollkästchen bei (1) legt fest, ob die Turingmaschine in diesem Zustand starten soll. Es kann nur maximal einen Startzustand geben. Der erste hinzugefügte Zustand ist immer der Startzustand. 
Das Kontrollkästchen bei (2) legt fest, ob dieser Zustand ein Endzustand ist. Es kann mehrere Endzustände geben. 
Das rote Dreieck signalisiert, dass dieser Zustand einen Kommentar besitzt. Positionieren Sie Ihre Maus über dem Zustand um ihn anzuzeigen.
Sie können Zustände nachträglich durch einen Rechtsklick auf diese editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_10" xml:space="preserve">
    <value>Wiederholen Sie die letzten zwei Schritte bis die Tabelle so aussieht. Der Unterstrich '_' ist hier das Leerzeichen.</value>
  </data>
  <data name="TEXT_HelpWindow_11" xml:space="preserve">
    <value>Mit einem Rechtsklick auf eine Zelle können Sie einen Zustandsübergang hinzufügen (funktioniert nicht bei den Zellen ganz oben und ganz links).
Wie man das sich nun öffnende Popup liest:
Die Turingmaschine befindet sich im Zustand "Start" und der Lese-/Schreibkopf ist aktuell über dem Zeichen "0" auf dem Band. 
Die Turingmaschine ersetzt "0" durch "0" und bewegt den Lese-/Schreibkopf eine Zelle nach rechts. 
Die Turingmaschine ist nun im Zustand "q1".
Das rote Dreieck signalisiert, dass dieser Zustandsübergang einen Kommentar besitzt. Positionieren Sie Ihre Maus über dem Zustandsübergang um ihn anzuzeigen.</value>
  </data>
  <data name="TEXT_HelpWindow_12" xml:space="preserve">
    <value>Wenn Ihre Tabelle genauso aussieht, wie hier gezeigt, dann kann die Turingmaschine bestimmen, ob Ihr Eingabewort eine gerade oder ungerade Anzahl an Nullen enthält. Ist die Anzahl gerade erreicht Sie einen akzeptierenden Endzustand, ansonsten nicht.
Da Sie jetzt den Umgang mit der Tabelle kennen, können Sie sich an komplexere und damit auch interessantere Turingmaschinen wagen.
Wollen Sie sich inspirieren lassen, dann können Sie in den verfügbaren Beispielen stöbern.</value>
  </data>
  <data name="TEXT_HelpWindow_13" xml:space="preserve">
    <value>Dieser Abschnitt zeigt Ihnen, wie Sie nur mit dem Diagramm eine neue Turingmaschine erstellen können, die Ihr Eingabewort daraufhin überprüft, ob die Anzahl der eingegebenen Nullen gerade ist oder nicht.</value>
  </data>
  <data name="TEXT_HelpWindow_14" xml:space="preserve">
    <value>Mit einem Rechtsklick auf die Fläche des Diagramms öffnet sich ein Menü, über das Sie ein neues Zeichen hinzufügen können.
Mit dem Kontrollkästchen bei (1) entscheiden Sie, ob das neue Zeichen im Eingabealphabet enthalten sein soll. Damit kann es im Eingabewort verwendet werden.
 Diese Zeichen werden fettgedruckt abgebildet.
Mit dem Kontrollkästchen bei (2) entscheiden Sie, ob das neue Zeichen das Leerzeichen darstellen soll. Es muss immer ein Leerzeichen explizit von Ihnen festgelegt werden. Dieses Zeichen ist rot gefärbt.
Sie können Zeichen nachträglich über das Menü editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_15" xml:space="preserve">
    <value>Mit einem Rechtsklick auf die Fläche des Diagramms öffnet sich ein Menü, über das Sie einen neuen Zustand hinzufügen können.
Das Kontrollkästchen bei (1) legt fest, ob die Turingmaschine in diesem Zustand starten soll. Es kann nur maximal einen Startzustand geben. Der erste hinzugefügte Zustand ist immer der Startzustand. 
Das Kontrollkästchen bei (2) legt fest, ob dieser Zustand ein Endzustand ist. Es kann mehrere Endzustände geben.
Der rote Punkt bei (3) signalisiert, dass dieser Zustand einen Kommentar besitzt. Positionieren Sie Ihre Maus über dem Zustand um ihn anzuzeigen. 
Sie können Zustände nachträglich durch einen Rechtsklick auf diese editieren oder löschen.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_17" xml:space="preserve">
    <value>Hinzufügen eines Zustandsübergangs</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_18" xml:space="preserve">
    <value>Endresultat</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_08" xml:space="preserve">
    <value>Hinzufügen eines Zeichens</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_09" xml:space="preserve">
    <value>Hinzufügen eines Zustands</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_10" xml:space="preserve">
    <value>Aktuelles Ziel</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_11" xml:space="preserve">
    <value>Hinzufügen eines Zustandsübergangs</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_12" xml:space="preserve">
    <value>Endresultat</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_13" xml:space="preserve">
    <value>Wie man das Diagramm benutzt</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_14" xml:space="preserve">
    <value>Hinzufügen eines Zeichens</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_15" xml:space="preserve">
    <value>Hinzufügen eines Zustands</value>
  </data>
  <data name="TEXT_Warn_Memory" xml:space="preserve">
    <value>Das Speichern hat aufgrund eines Fehlers nicht funktioniert!</value>
  </data>
  <data name="TEXT_Warn_Transformation4" xml:space="preserve">
    <value>Transformation 4 kann momentan nicht ausgeführt werden. Bitte überprüfen, dass der Startzustand kein Endzustand ist und der Lese-/Schreibkopf niemals unbewegt ist.</value>
  </data>
  <data name="TEXT_Warn_Transformation5" xml:space="preserve">
    <value>Transformation 5 kann momentan nicht ausgeführt werden. Bitte überprüfen, dass mindestens ein Endzustand existiert.</value>
  </data>
  <data name="TEXT_AddTransition" xml:space="preserve">
    <value>Transition hinzufügen</value>
  </data>
  <data name="TEXT_EditState" xml:space="preserve">
    <value>Zustand beabeiten</value>
  </data>
  <data name="TEXT_EditSymbol" xml:space="preserve">
    <value>Zeichen bearbeiten</value>
  </data>
  <data name="TEXT_EditTransition" xml:space="preserve">
    <value>Transition bearbeiten</value>
  </data>
  <data name="TEXT_RemoveState" xml:space="preserve">
    <value>Zustand entfernen</value>
  </data>
  <data name="TEXT_RemoveSymbol" xml:space="preserve">
    <value>Zeichen entfernen</value>
  </data>
  <data name="TEXT_RemoveTransition" xml:space="preserve">
    <value>Transition entfernen</value>
  </data>
  <data name="TEXT_Table" xml:space="preserve">
    <value>Tabelle</value>
  </data>
  <data name="TEXT_AddSymbol" xml:space="preserve">
    <value>Zeichen hinzufügen</value>
  </data>
  <data name="TEXT_PopupIsBlankChar" xml:space="preserve">
    <value>Leerzeichen</value>
  </data>
  <data name="TEXT_Warn_BlankCharMustBeSet" xml:space="preserve">
    <value>Das Leerzeichen muss festgelegt sein!</value>
  </data>
  <data name="TEXT_Warn_SymbolIsInputAndBlank" xml:space="preserve">
    <value>Das Zeichen kann nicht gleichzeitig im Eingabealphabet vorkommen und das Leerzeichen sein!</value>
  </data>
  <data name="TEXT_Warn_NoStartState" xml:space="preserve">
    <value>Es gibt keinen Startzustand!</value>
  </data>
  <data name="TEXT_Warn_UnsupportedLanguage" xml:space="preserve">
    <value>Diese Sprache wird nicht unterstützt!</value>
  </data>
  <data name="TEXT_AddState" xml:space="preserve">
    <value>Zustand hinzufügen</value>
  </data>
  <data name="TEXT_Animate" xml:space="preserve">
    <value>Animation</value>
  </data>
  <data name="TEXT_Arrange" xml:space="preserve">
    <value>Anordnen</value>
  </data>
  <data name="TEXT_Warn_SymbolAlreadyExists" xml:space="preserve">
    <value>Im Bandalphabet ist mindestens ein Zeichen doppelt!</value>
  </data>
  <data name="TEXT_Warn_SymbolDoesNotExist" xml:space="preserve">
    <value>Nicht alle Zeichen, die die Turingmaschine verwendet sind im Bandalphabet vorhanden!</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_ChapterSelection" xml:space="preserve">
    <value>_Kapitelauswahl</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Diagram" xml:space="preserve">
    <value>Zustan_dsdiagramm</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Introduction" xml:space="preserve">
    <value>_Einführung</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program" xml:space="preserve">
    <value>_Programm</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program_GeneralUse" xml:space="preserve">
    <value>_Benutzung</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program_Shortcuts" xml:space="preserve">
    <value>_Tastenkürzel</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Table" xml:space="preserve">
    <value>T_abelle</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_AddState" xml:space="preserve">
    <value>Zusta_nd hinzufügen</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_AddCharacter" xml:space="preserve">
    <value>_Zeichen hinzufügen</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_AddTransition" xml:space="preserve">
    <value>Zus_tandsübergang hinzufügen</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_Outlook" xml:space="preserve">
    <value>A_usblick</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_Result" xml:space="preserve">
    <value>End_resultat</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine" xml:space="preserve">
    <value>_Turingmaschine</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine_Explanation1" xml:space="preserve">
    <value>Turingmaschine erklärt (Teil _1)</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine_Transformation" xml:space="preserve">
    <value>Trans_formationen erklärt</value>
  </data>
  <data name="TEXT_Warn_Transformation1" xml:space="preserve">
    <value>Transformation 1 kann momentan nicht ausgeführt werden. Bitte überprüfen, ob es einen Startzustand und/oder Endzustand gibt!</value>
  </data>
  <data name="TEXT_HelpWindow_01" xml:space="preserve">
    <value>Hier sehen Sie, wo Sie die wichtigsten Funktionenen dieses Programms finden. Wie Sie Turingmaschinen mittels Tabelle und Diagramm erstellen wird später ausführlich erklärt.</value>
  </data>
  <data name="TEXT_HelpWindow_02" xml:space="preserve">
    <value>Hier sehen Sie ein paar Beispiele für Tastenkürzel. Alle benutzen die "Alt"-Taste und die Taste des unterstrichenen Buchstabens.</value>
  </data>
  <data name="TEXT_HelpWindow_03" xml:space="preserve">
    <value>Hier sehen Sie alle Funktionstasten und deren Funktion.</value>
  </data>
  <data name="TEXT_HelpWindow_04" xml:space="preserve">
    <value>Eine Turingmaschine ist eine abstrakte Maschine die bestimmen kann, ob Ihr Eingabewort teil der Sprache der Maschine ist.
Sprache: Legt die Reihenfolge fest, in der Zeichen aufeinander folgen.
Bandalphabet: Alle Zeichen, die die Turingmaschine vom Band lesen und auf dieses schreiben kann.
Leerzeichen: Spezielles Zeichen, das eine leere Zelle auf dem Band symbolisiert.
Eingabealphabet: Alle Zeichen, die im Eingabewort vorkommen können (Teil des Bandalphabets).
Eingabewort: Dieses Wort steht auf dem Band, bevor die Turingmaschine zu arbeiten beginnt.
Lese-/Schreibkopf: Liest Zeichen vom und schreibt Zeichen auf das Band.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_01" xml:space="preserve">
    <value>Die wichtigsten Funktionen im Überblick</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_02" xml:space="preserve">
    <value>Tastenkürzel</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_03" xml:space="preserve">
    <value>Funktionstasten</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_04" xml:space="preserve">
    <value>Was ist eine Turingmaschine? (Teil 1)</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_Program_FunctionKeys" xml:space="preserve">
    <value>_Funktionstasten</value>
  </data>
  <data name="TEXT_HelpText" xml:space="preserve">
    <value>_Hilfe</value>
  </data>
  <data name="TEXT_HelpWindow_05" xml:space="preserve">
    <value>Startzustand: Zustand in dem die Turingmaschine sich befindet, wenn sie beginnt zu arbeiten.
Endzustand: Zustand in dem die Turingmaschine anhält und überprüft, ob Ihr Eingabewort teil der Sprache der Turingmaschine ist oder nicht.
Zustandsübergang: Abhängig vom Zeichen unter dem Lese-/Schreibkopf und dem Zustand in dem die Maschine aktuell ist. Ersetzt das Zeichen unter dem Lese-/Schreibkopf, bewegt diesen entweder nach rechts, links oder gar nicht und die Maschine geht dann entweder in einen neuen Zustand über oder bleibt im aktuellen</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_05" xml:space="preserve">
    <value>Was ist eine Turingmaschine? (Teil 2)</value>
  </data>
  <data name="TEXT_HelpWindow_16" xml:space="preserve">
    <value>Wiederholen Sie die letzten zwei Schritte bis das Diagramm und Alphabet so aussieht. Der Unterstrich '_' ist hier das Leerzeichen.</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_16" xml:space="preserve">
    <value>Aktuelles Ziel</value>
  </data>
  <data name="TEXT_HelpWindow_06" xml:space="preserve">
    <value>Eine Transformation fügt extra Einschränkungen hinzu, die die Turingmaschine einhalten muss. Das hat keinen Einfluss darauf, ob ein gewisses Eingabewort teil der Sprache der Maschine ist oder nicht.
Die Turingmaschine kann auf folgende Arten transformiert werden:
1) Kein Zustandsübergang kann wieder in den Startzustand führen, der Startzustand kann kein Endzustand sein und aus einem Endzustand führt kein Zustandsübergang mehr heraus (betrifft auch Schleifen auf den Endzustand).
2) Jeder Zustandsübergang muss den Lese-/Schreibkopf entweder nach links oder rechts bewegen.
3) Sie können ein neues Leerzeichen definieren, welches das alte ersetzt, wenn es gelesen oder geschrieben wird. Das beeinflusst nur Zustandsübergänge und nicht die leeren Zellen links und rechts des Eingabeworts.
4) Alle Zustandsübergänge werden in eine linke und eine rechte Hälfte aufgeteilt. In der linken sind nur Zustandsübergänge, die den Lese-/Schreibkopf nach links bewegen. Das gleiche gilt für die rechte. (Voraussetzungen: Transformation 1 und 2)
5) Es gibt genau einen Endzustand. (Voraussetzungen: Mindestens ein Endzustand muss bereits vorhanden sein)</value>
  </data>
  <data name="TEXT_HelpWindow_Heading_06" xml:space="preserve">
    <value>Was ist eine Transformation?</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TableDiagram_CurrentGoal" xml:space="preserve">
    <value>Aktuelles Z_iel</value>
  </data>
  <data name="TEXT_HelpWindow_Menu_TuringMachine_Explanation2" xml:space="preserve">
    <value>Turingmaschine erklärt (Teil _2)</value>
  </data>
  <data name="TEXT_Transformation3DialogNote" xml:space="preserve">
    <value>Bei allen bestehenden Zustandsübergängen, die das (Band-)Leerzeichen schreiben, wird das Schreibsymbol mit dem Ersatzsymbol überschrieben.</value>
  </data>
  <data name="TEXT_Warn_NewBlankAlreadyExists" xml:space="preserve">
    <value>Das gewählte Zeichen ist bereits im Bandalphabet enthalten.</value>
  </data>
  <data name="TEXT_Warn_Transformation3" xml:space="preserve">
    <value>Tranformation 3 nicht ausführbar, da bei keinem Übergang ein Leerzeichen geschrieben wird.</value>
  </data>
  <data name="TEXT_SaveAs" xml:space="preserve">
    <value>Speichern _unter</value>
  </data>
</root>